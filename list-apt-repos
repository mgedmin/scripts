#!/usr/bin/python3
import argparse
import email
import pathlib
from collections import defaultdict
from typing import Iterable, Sequence, NamedTuple, List, TextIO


__version__ = '1.0'


def sources_lists() -> Iterable[pathlib.Path]:
    yield pathlib.Path('/etc/apt/sources.list')
    yield from pathlib.Path('/etc/apt/sources.list.d').glob('*.list')
    yield from pathlib.Path('/etc/apt/sources.list.d').glob('*.sources')


class RepoInfo(NamedTuple):
    url: str
    suite: str
    components: Sequence[str]


def parse_list(source_list: TextIO) -> Iterable[RepoInfo]:
    # legacy sources.list format
    for line in source_list:
        if line.startswith('deb'):
            # deb url suite components # comment
            bits = line.partition('#')[0].split()
            yield RepoInfo(bits[1], bits[2], bits[3:])


def parse_sources(source_list: TextIO) -> Iterable[RepoInfo]:
    # deb822 format
    for source in source_list.read().split('\n\n'):
        m = email.message_from_string(source)
        urls = m['URIs'].split()
        suites = m['Suites'].split()
        components = m['Components'].split()
        types = m['Types'].split()  # deb, deb-src
        if 'deb' not in types:
            continue
        enabled = m['Enabled']
        if enabled == 'no':
            continue
        for url in urls:
            for suite in suites:
                yield RepoInfo(url, suite, components)


def parse_sources_file(source_list: pathlib.Path) -> Iterable[RepoInfo]:
    with source_list.open() as fp:
        if source_list.name.endswith('.list'):
            yield from parse_list(fp)
        elif source_list.name.endswith('.sources'):
            yield from parse_sources(fp)
        else:
            # can't happen
            assert f'Unrecognized filename: {source_list}'


PPA_PREFIXES = [
    'http://ppa.launchpad.net/',
    'https://ppa.launchpadcontent.net/',
]

PPA_SUFFIXES = [
    '/ubuntu',
    '/ubuntu/',
]


def simplify_url(url: str) -> str:
    for prefix in PPA_PREFIXES:
        if url.startswith(prefix):
            url = 'ppa:' + url[len(prefix):]
            for suffix in PPA_SUFFIXES:
                if url.endswith(suffix):
                    url = url[:-len(suffix)]
                    break
            break
    return url


def column_widths(matrix: List[List[str]]) -> List[int]:
    widths = []  # type: List[int]
    for row in matrix:
        for idx, cell in enumerate(row):
            while idx >= len(widths):
                widths.append(0)
            widths[idx] = max(widths[idx], len(cell))
    return widths


def main():
    parser = argparse.ArgumentParser(
        description="list enabled apt repositories")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="show what source file defined each repository")
    args = parser.parse_args()

    repos = defaultdict(set)
    for source_list in sources_lists():
        for source in parse_sources_file(source_list):
            key = (simplify_url(source.url), source.suite)
            if args.verbose:
                key = (source_list.name, ) + key
            repos[key].update(source.components)

    rows = []
    for key, components in sorted(repos.items()):
        rows.append(key + (' '.join(sorted(components)), ))

    widths = column_widths(rows)

    for row in rows:
        print('  '.join(
            cell.ljust(width) for cell, width in zip(row, widths)
        ).rstrip())


if __name__ == "__main__":
    main()
