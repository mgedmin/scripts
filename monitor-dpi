#!/usr/bin/python3
"""
Computes and prints monitor resolution (dots per inch) given the size in pixels
and width/height in milimeters or diagonal in inches.

Usage:

  monitor-dpi
    prints the resolution of all connected monitors (Linux only)

  monitor-dpi W H D
    prints the resolution of a D-inch monitor with WxH pixels

  monitor-dpi W H WMM HMM
    prints the resolution of a monitor with WxH pixels, sized WMMxHMM
    milimeters

Examples:

  monitor-dpi                   # this machine
  monitor-dpi 1080 768 32       # my 32" TV
  monitor-dpi 1366 768 277 156  # my 12.5" laptop

"""
import math
import optparse
import os
import re
import typing
from typing import Iterable, List

__version__ = '3.0'
__author__ = 'Marius Gedminas <marius@gedmin.as>'
__url__ = 'https://github.com/mgedmin/scripts/blob/master/monitor-dpi'
__licence__ = 'GPLv2+'


MM_PER_INCH = 25.4


class DpiInfo(typing.NamedTuple):
    hdpi: float
    vdpi: float
    ddpi: float


class PixelSize(typing.NamedTuple):
    w: int
    h: int


class PhysicalSize(typing.NamedTuple):
    w_mm: float
    h_mm: float

    @property
    def diagonal_inches(self) -> float:
        return math.hypot(self.w_mm, self.h_mm) / MM_PER_INCH

    def dpi(self, pixel_size: PixelSize) -> DpiInfo:
        w, h = pixel_size
        hdpi = w * MM_PER_INCH / self.w_mm
        vdpi = h * MM_PER_INCH / self.h_mm
        ddpi = math.hypot(w, h) * MM_PER_INCH / math.hypot(self.w_mm, self.h_mm)
        return DpiInfo(hdpi, vdpi, ddpi)


class DiagonalSize(typing.NamedTuple):
    inches: float

    def dpi(self, pixel_size: PixelSize) -> DpiInfo:
        w, h = pixel_size
        d = self.inches
        hdpi = w * math.sqrt(1 + h ** 2 / w ** 2) / d
        vdpi = h * math.sqrt(1 + w ** 2 / h ** 2) / d
        ddpi = math.hypot(w, h) / d
        return DpiInfo(hdpi, vdpi, ddpi)


class MonitorInfo(typing.NamedTuple):
    name: str
    pixel_size: PixelSize
    physical_size: PhysicalSize


def parse_xrandr_output(output: Iterable[str]) -> Iterable[MonitorInfo]:
    """Parse the output of xrandr

    Expects an iterable of strings (one per line).

    Returns an iterable of tuples (name, w_px, h_px, w_mm, h_mm), one for each
    connected monitor.
    """
    # xrandr output example:
    #
    #   Screen 0: minimum 8 x 8, current 2646 x 1177, maximum 32767 x 32767
    #   LVDS1 connected primary 1366x768+0+409 (normal left inverted right x axis y axis) 277mm x 156mm
    #      1366x768      60.00*+
    #      1360x768      59.80    59.96
    #      1280x720      60.00
    #      1024x768      60.00
    #      1024x576      60.00
    #      960x540       60.00
    #      800x600       60.32    56.25
    #      864x486       60.00
    #      640x480       59.94
    #      720x405       60.00
    #      680x384       60.00
    #      640x360       60.00
    #   DP1 disconnected (normal left inverted right x axis y axis)
    #   DP2 disconnected (normal left inverted right x axis y axis)
    #   DP3 disconnected (normal left inverted right x axis y axis)
    #   HDMI1 connected 1280x1024+1366+0 (normal left inverted right x axis y axis) 376mm x 301mm
    #      1280x1024     60.02*+  75.02
    #      1280x960      60.00
    #      1152x864      75.00
    #      1024x768      75.08    70.07    60.00
    #      832x624       74.55
    #      800x600       72.19    75.00    60.32    56.25
    #      640x480       75.00    72.81    66.67    60.00
    #      720x400       70.08
    #   HDMI2 disconnected (normal left inverted right x axis y axis)
    #   HDMI3 disconnected (normal left inverted right x axis y axis)
    #   VGA1 disconnected (normal left inverted right x axis y axis)
    #   VIRTUAL1 disconnected (normal left inverted right x axis y axis)
    #
    # NB: some of the lines originally had trailing whitespace.
    rx = re.compile(r'^(?P<name>.+) connected( primary)?'
                    r' (?P<w_px>\d+)x(?P<h_px>\d+)\+\d+\+\d+ \(.*\)'
                    r' (?P<w_mm>\d+)mm x (?P<h_mm>\d+)mm')
    for line in output:
        m = rx.match(line)
        if m:
            yield MonitorInfo(
                m.group('name'),
                PixelSize(int(m.group('w_px')), int(m.group('h_px'))),
                PhysicalSize(int(m.group('w_mm')), int(m.group('h_mm'))),
            )


def get_xrandr_output() -> List[MonitorInfo]:
    """Determine the sizes of connected monitors.

    Returns a list of tuples (name, pixel_size, physical_size) for each
    connected monitor.

    Spawns xrandr to query the running X server.  Works only on Linux.
    """
    return list(parse_xrandr_output(os.popen('xrandr')))


def report_mm(pixel_size: PixelSize, physical_size: PhysicalSize) -> None:
    """Report the resolution given sizes in px and mm."""
    report_size(physical_size)
    report_dpi(physical_size.dpi(pixel_size))


def report_diag(pixel_size: PixelSize, diagonal: DiagonalSize) -> None:
    """Report the resolution given size in px and diagonal in inches."""
    report_dpi(diagonal.dpi(pixel_size))


def report_name(name: str, pixel_size: PixelSize) -> None:
    """Report the name of the monitor connection."""
    print(f"{name} ({pixel_size.w}x{pixel_size.h})")


def report_size(physical_size: PhysicalSize) -> None:
    """Report the diagonal size of a monitor in inches."""
    d = '%.1f' % physical_size.diagonal_inches
    if d.endswith('.0'):
        d = d[:-2]
    print(f"Monitor size: {d} inches ({physical_size.w_mm} mm x {physical_size.h_mm} mm)")


def report_dpi(dpi: DpiInfo) -> None:
    """Report the resolution of a monitor in dots per inch."""
    hdpi = '%.0f' % dpi.hdpi
    vdpi = '%.0f' % dpi.vdpi
    ddpi = '%.0f' % dpi.ddpi
    if hdpi == vdpi:
        print(f"Resolution: {hdpi} dots per inch")
    else:
        print(f"Horizontal resolution: {hdpi} dots per inch")
        print(f"Vertical resolution:   {vdpi} dots per inch")
        print(f"Diagonal resolution:   {ddpi} dots per inch")


def main():
    parser = optparse.OptionParser(
        version=__version__,
        usage="%prog\n"
              "       %prog xres yres inches\n"
              "       %prog xres yres width-mm height-mm",
        description="Calculate the resolution in dots per inch given the"
                    " logical screen size in pixels and the physical screen"
                    " size (either the diagonal in inches, or width and"
                    " height in milimeters).\n\n"
                    "Examples: '%prog 1024 768 14.1',"
                    " '%prog 1280 800 331 207'.")
    opts, args = parser.parse_args()
    if len(args) == 0:
        monitors = get_xrandr_output()
        for idx, m in enumerate(monitors):
            if idx > 0:
                print()
            report_name(m.name, m.pixel_size)
            report_mm(m.pixel_size, m.physical_size)
        return
    if len(args) < 3:
        parser.error("not enough arguments")
    if len(args) > 4:
        parser.error("too many arguments")
    try:
        pixel_size = PhysicalSize(float(args[0]), float(args[1]))
        if len(args) == 3:
            diagonal_size = DiagonalSize(float(args[2]))
            report_diag(pixel_size, diagonal_size)
        else:
            physical_size = PhysicalSize(float(args[2]), float(args[3]))
            report_mm(pixel_size, physical_size)
    except ValueError:
        parser.error("argument is not a number")


if __name__ == '__main__':
    main()
