#!/usr/bin/perl -w
# Summarize log files and logcheck mail messages
# Copyright (c) 2002, 2009, 2015 Marius Gedminas <marius@gedmin.as>
# GPL.

# One day these will become cmdline options
my $do_iptables = 1;
my $totals = 1;
my $colorize = 1;
my $spawn_pager = 1;
my $pager = "less -S -M";
$pager .= " -R" if $colorize;

if ($spawn_pager && -t STDOUT) {
    open STDOUT, "|$pager" or die "Cannot spawn $pager: $!\n";
}

my @lines;
while (<>) {
  # Skip e-mail headers
  if (/^From[: ]|^Return-Path:/) {
      local $/ = "\n\n";
      <>;
      next;
  }
  # Skip logcheck titles
  next if /^Security Violations/ ||
	  /^Possible Security Violations/ ||
	  /^Unusual System Events/ ||
	  /^System Events/ ||
	  /^=-=-=-/ ||
	  /^This mail is sent by logcheck./ ||
	  /^please modify the configuration files in \/etc\/logcheck/ ||
	  /^\r?\n$/;
  # Get rid of date/time
  s/^... +\d+ \d+:\d+:\d+ //;
  s/^\d\d\d\d-\d\d-\d\d[T ]\d\d:\d\d:\d\d(,\d\d\d\d\d\d)?([-+]\d\d:?\d\d)? //;
  # Get rid of process IDs
  s/\[\d+\]/[(pid)]/;
  # Twisted
  s/\[Broker,\d+,/[Broker,(pid),/;
  # PostgreSQL
  s/postgres\[\(pid\)\]: \[\d+\]/postgres[(pid)]: [(n)]/;
  s/postgres\[\(pid\)\]: \[\d+-\d+\]/postgres[(pid)]: [(n-m)]/;
  # Samba
  s{([sn]mbd\[\(pid\)\]): \[\d\d\d\d/\d\d/\d\d \d\d:\d\d:\d\d, \d+\]}{$1: [(datetime)]};
  # named
  s/(named\[\(pid\)\]: error .* resolving ').*(': .*)/$1(name)': (ip#port)/;
  s/(named\[\(pid\)\]: client) .*: (query \(cache\)) '.*' (denied)/$1 (ip#port): $2 '(name\/type)' $3/;
  # amavis
  s/(amavis\[\(pid\)\]): \(\d+(?:-\d+)*\) ([^,]+),.*/$1: (nnnnn) $2, .../;
  # cyrus
  s/(cyrus\/.*) txn \d+/$1 txn (id)/;
  s/(cyrus\/.*: Delivered:) <([^>]+)>/$1 <(email)>/;
  s/(cyrus\/.*: duplicate_check:) <([^>]+)> */$1 <(email)> /;
  s/(cyrus\/.*: duplicate_mark:) <([^>]+)>.*/$1 <(email)> .../;
  s/(cyrus\/.*: process) \d+ exited/$1 (pid) exited/;
  # postfix
  s/(postfix\/anvil.*: statistics: .*) at (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d+ \d+:\d+:\d+/$1 at (date) (time)/;
  s/(postfix\/anvil.*: statistics: max cache size) \d+/$1 (n)/;
  s/(postfix\/anvil.*: statistics: max connection count) \d+ for \((smtps?):.*\)/$1 (n) for ($2:(ip))/;
  s/(postfix\/anvil.*: statistics: max connection rate) \d+\/(\d+s) for \((smtps?):.*\)/$1 (n)\/$2 for ($3:(ip))/;
  s/(postfix\/scache.*: statistics: start interval) .*/$1 (date) (time)/;
  s/(postfix\/.*:) [0-9A-F]{10}:/$1 (queue-id):/;
  s/(postfix\/.*:) (.*) [0-9A-F]{10}\b/$1 $2 (queue-id)/;
  s/(postfix\/.*:) (.*) message-id=<[^>]*>/$1 $2 message-id=<(messageid)>/;
  s/(postfix\/.*:) (.*) (from)=<[^>]*>/$1 $2 $3=<(email)>/;
  s/(postfix\/.*:) (.*) (to)=<[^>]*>/$1 $2 $3=<(email)>/;
  s/(postfix\/.*:) (.*) (orig_to)=<[^>]*>/$1 $2 $3=<(email)>/;
  s/(postfix\/.*:) (.*) (delay)=[^ ,]*/$1 $2 $3=(delay)/;
  s/(postfix\/.*:) (.*) (delays)=[^ ,]*/$1 $2 $3=(delay)/;
  s/(postfix\/.*:) (.*) (size)=\d+/$1 $2 $3=(n)/;
  s/(postfix\/.*:) (.*) (nrcpt)=\d+/$1 $2 $3=(n)/;
  s/(postfix\/.*:) (.*) (id)=\d+-\d+/$1 $2 $3=(nnnnn-nn)/;
  s/(postfix\/.*:) (.*) (client)=[^ ,]*/$1 $2 $3=(hostname)[(ip)]/;
  s/(postfix\/.*:) (.*) (helo)=<[^>]*>/$1 $2 $3=<(hostname)>/;
  s/(postfix\/.*:) (.*) (relay)=[^ ,]*/$1 $2 $3=<(hostname)[(ip)]:(port)/;
  s/(postfix\/.*:) (.*) (status)=sent \(.*\)/$1 $2 $3=sent (...)/;
  s/(postfix\/.*:) (.*) [a-zA-Z0-9]{14} (Message accepted for delivery)/$1 $2 (id) $3/;
  s/(postfix\/.*: (NOQUEUE|\(queue-id\)): reject: RCPT from) \S*:/$1 (hostname)[(ip)]:/;
  s/(postfix\/.*: (NOQUEUE|\(queue-id\)): reject: .*) <[^>]*>/$1 <(email)>/;
  s/(postfix\/.*: (dis)?connect from) \S+/$1 (hostname)[(ip)]/;
  s/(postfix\/.*:) (warning): \S+: (address not listed for hostname) \S+/$1 $2: (ip): $3 (hostname)/;
  s/(postfix\/.*:) ((timeout|lost connection|improper command pipelining) after .*) from \S+/$1 $2 from (hostname)[(ip)]/;
  # postgrey
  s/(postgrey\[\(pid\)\]:) (.*) (client_name)=[^ ,\n]*/$1 $2 $3=(hostname)/;
  s/(postgrey\[\(pid\)\]:) (.*) (client_address)=[^ ,\n]*/$1 $2 $3=(ip)/;
  s/(postgrey\[\(pid\)\]:) (.*) (sender)=[^ ,\n]*/$1 $2 $3=(email)/;
  s/(postgrey\[\(pid\)\]:) (.*) (recipient)=[^ ,\n]*/$1 $2 $3=(email)/;
  s/(postgrey\[\(pid\)\]:) (.*) (reason=early-retry) \(\d+s missing\)/$1 $2 $3 ((n)s missing)/;
  # check-health
  s/((?:is low on disk space|too much swap used) \(\d+)(\d)\d\d\d\d\d\)/$1.$2G)/;
  s/((?:is low on disk space|too much swap used) \(\d+)\d\d\d\)/$1M)/;
  s{HTTP (WARNING|CRITICAL): HTTP/1.1 (\d+ .*) - \d+ bytes in \d+\.\d+ second response time \|time=\d+\.\d+s;;;0.000000(;10.000000)? size=\d+B;;;0}
   {HTTP $1: HTTP/1.1 $2 - (n) bytes in (s) second response time |time=(s)s;;;0.000000 size=(n)B;;;0};
  s/load average: (\d+)\.\d+, (\d+)\.\d+, (\d+)\.\d+/load average: $1.xx, $2.xx, $3.xx/;
  # apt-get
  s{^\(Reading database \.\.\. \d+%}{(Reading database ... (n)%};
  s{^\(Reading database \.\.\. \d+ files and directories currently installed}{(Reading database ... (n) files and directories currently installed};
  s{^Fetched [0-9,]+(\.\d+)? ?[kMG]B in (\d+(m|min|min ))?\d+s \([0-9,]+(\.\d+)? ?[kMG]?B/s\)}{Fetched (bytes)B in (seconds)s ((speed)B/s)};
  s{^After (unpacking|this operation,) [0-9,]+(\.\d+)? ?[kMG]?B (of additional disk space will be used.|disk space will be freed.)}{After this operation, (delta)B of disk space will be freed or used.};
  s{^Get: ?\d+ https?://\S+ \S+ \S+ \S+ (?:\S+ )?\[[0-9,]+(\.\d+)? ?[kMG]?B\]}{Get: (n) (repository) (component) (package) (version) [(size)]};
  s{^Need to get ([0-9,]+(\.\d+)? ?[kMG]?B/)?[0-9,]+(\.\d+)? ?[kMG]?B of archives.}{Need to get (bytes) of archives};
  s{^\d+ upgraded, \d+ newly installed, \d+ to remove and \d+ not upgraded.}{(n) upgraded, (n) newly installed, (n) to remove and (n) not upgraded.};
  # unattended-upgrades
  s{Log (started|ended): \d+-\d+-\d+  \d+:\d+:\d+}{Log $1: YYYY-MM-DD  HH:MM:SS};
  s{(Writing dpkg log to '/var/log/unattended-upgrades/unattended-upgrades-dpkg_)\d+-\d+-\d+_\d+:\d+:\d+.\d+.log'}{$1YYYY-MM-DD_HH:MM:SS.ssssss.log'};
  # etckeeper
  s{^ *\d+ files? changed, \d+ insertions?\(\+\), \d+ deletions?\(-\)}{(n) files changed, (n) insertions(+), (n) deletions(-)};
  s{^ *\d+ files? changed, \d+ insertions?\(\+\)}{(n) files changed, (n) insertions(+)};
  s{^ *\d+ files? changed, \d+ deletions?\(-\)}{(n) files changed, (n) deletions(-)};
  s{^\[master [0-9a-f]+\] (committing|saving)}{[master (commit)] $1};
  # gutsy is out of date
  s{(Failed to fetch http://[^/ ]+[.]ubuntu[.]com/ubuntu/dists/gutsy)[^ ]*}{$1/...};
  # iptables
  if ($do_iptables && /kernel:.* IN=.* OUT=/) {
	# iptables fw log fields:
	#   IN OUT MAC SRC DST LEN TOS PREC TTL ID DF PROTO SPT DPT WINDOW RES
	#   SYN URGP
	# We want a nice output like
	#   kernel: (whatever)  PROTO=  DPT=  DST=  SRC=  SPT=  the rest...
	my ($proto, $dpt, $dst, $spt, $src) = ('', '', '', '', '');
	s/ PROTO=([^ ]*)// && ($proto = $&);
	s/ DPT=([^ ]*)//   && ($dpt   = sprintf " DPT=%5s", $1);
	s/ DST=([^ ]*)//   && ($dst   = sprintf " DST=%-15s", $1);
	s/ SPT=([^ ]*)//   && ($spt   = sprintf " SPT=%5s", $1);
	s/ SRC=([^ ]*)//   && ($src   = sprintf " SRC=%-15s", $1);
	s/ IN=/$proto$dpt$dst$src$spt$&/;
  }
  push @lines, $_;
}
# Show some totals
if ($totals) {
    print "Processed ", scalar @lines, " lines\n"
}
# Sort; count and remove duplicates
@lines = sort @lines;
my $last = '';
my $count = 0;
push @lines, '';
for (@lines) {
    if ($last eq $_) {
	$count++;
    } else {
	# XXX this is the place to launder $last from harmful control chars
	# (we pipe it to less -R after all)
	if ($count > 1) {
	    chomp $last;
	    if ($colorize and $count > 9) {
		$last .= "\t\e[1;31m{*$count}\e[0m\n";
	    } else {
		$last .= "\t{*$count}\n";
	    }
	}
	print "\e[0m" if $colorize;
	print $last;
	$last = $_;
	$count = 1;
    }
}
close STDOUT;
