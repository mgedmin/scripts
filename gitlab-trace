#!/bin/bash
usage="\
usage: $0 [-v] [--project id] --job id
usage: $0 [-v] [--project id] [--branch name]
usage: $0 [-v] [--project id] pipeline-id [job-name [nth-job-of-that-name]]
"
verbose=0
job_id=
project=
branch=
pipeline=
job=
nth=

info() {
    if [ "$verbose" -ge 1 ]; then
        printf "%s\n" "$*"
    fi
}
debug() {
    if [ "$verbose" -ge 2 ]; then
        printf "%s\n" "$*"
    fi
}

while [ $# -gt 0 ]; do
    case "$1" in
        --project=*)
            project=${1#*=}
            debug "setting project to $project"
            shift
            ;;
        --project)
            project=$2
            debug "setting project to $project"
            shift 2
            ;;
        --job=*)
            job_id=${1#*=}
            debug "setting job_id to $job_id"
            shift
            ;;
        --job)
            job_id=$2
            debug "setting job_id to $job_id"
            shift 2
            ;;
        --branch=*)
            branch=${1#*=}
            debug "setting branch to $branch"
            shift
            ;;
        --branch)
            branch=$2
            debug "setting branch to $branch"
            shift 2
            ;;
        -v|--verbose)
            verbose=$((verbose + 1))
            shift
            ;;
        --help)
            echo "$usage"
            exit
            ;;
        -*)
            echo "$usage" 1>&2
            exit 1
            ;;
        *)
            if [ -z "$pipeline" ]; then
                pipeline=$1;
            elif [ -z "$job" ]; then
                job=$1
            elif [ -z "$nth" ]; then
                nth=$1
            else
                echo "$usage" 1>&2
                exit 1
            fi
            shift
            ;;
    esac
done

if [ -n "$job_id" ] && [ -n "$pipeline" ]; then
    echo "Ignoring pipeline ($pipeline) because --job=$job_id is specified" 1>&2
fi

if [ -z "$project" ]; then
    project=$(git remote get-url origin | sed -e 's/[.]git$//' -e 's/^.*:\/\/[^\/]*\///' -e 's/\//%2f/') || exit 1
    [ -n "$project" ] && echo "GitLab project: $project"
fi
if [ -z "$project" ]; then
    echo "Could not determine GitLab project ID" 1>&2
    exit 1
fi

if [ -z "$job_id" ] && [ -z "$pipeline" ]; then
    if [ -z "$branch" ]; then
        branch=$(git symbolic-ref HEAD --short)
        echo "Current branch: $branch"
    fi
    pipelines=$(gitlab -o json -f id project-pipeline list --project-id="$project" --ref="$branch") || exit 1
    if [ -n "$pipelines" ]; then
        pipeline=$(echo "$pipelines" | jq -r '.[]|.id' | head -n 1) || exit 1
    else
        echo "Project $project doesn't have any pipelines for branch $branch"
        exit 1
    fi
fi

if [ -z "$job_id" ]; then
    jobs=$(gitlab -o json -f id,name,status project-pipeline-job list --project-id="$project" --pipeline-id="$pipeline") || exit 1
    if [ -n "$job" ]; then
        job_id=$(echo "$jobs" | jq -r '.[]|select(.name=="'"$job"'")|.id' | sort -n) || exit 1
    fi
    how_many=$(echo "$job_id" | wc -l)
    if [ "$how_many" -gt 1 ]; then
        # shellcheck disable=SC2086
        # because I want to convert newlines to spaces please
        echo "Found multiple jobs:" $job_id 1>&2
        if [ -z "$nth" ]; then
            job_id=$(echo "$job_id" | tail -n 1)
            echo "Selecting the last one: $job_id" 1>&2
        else
            job_id=$(echo "$job_id" | head -n "$nth" | tail -n 1)
            echo "Selecting #$nth: $job_id" 1>&2
        fi
    elif [ -z "$job_id" ]; then
        if [ -n "$job" ]; then
            echo "Job $job not found" 1>&2
        fi
        echo "Available jobs for pipeline #$pipeline:"
        echo "$jobs" | jq -r '.[] | "   --job=\(.id) - \(.name): \(.status)"'
        exit 1
    else
        info "Job ID: $job_id"
    fi
fi

gitlab project-job trace --project-id="$project" --id="$job_id"
