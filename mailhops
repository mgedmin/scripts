#!/usr/bin/perl -w
# Shows the route of an Internet mail message
# Version 0.0.5
#
# Copyright (c) 1999, 2000, 2011, 2024 Marius Gedminas <marius@gedmin.as>
#           (c) 2000 Mikko HÃ¤nninen <Mikko.Hanninen@iki.fi>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

use strict;
use POSIX qw(mktime);

my ($nr, $host, $timestamp, $lagminus, $lag, $totalminus, $total, $from);
my $verbose = 1;

format REPORT_TOP =
     Host                  Date received           Lag        Total lag
.
format REPORT_LINE =
@>>> @<<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<< @@<<<<<<<< @@<<<<<<<<
$nr, $host, $timestamp, $lagminus, $lag, $totalminus, $total
.

format REPORT_LINE_VERBOSE =
     from @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
          $from
.


# Setup
my %Months = (
    Jan => 1,
    Feb => 2,
    Mar => 3,
    Apr => 4,
    May => 5,
    Jun => 6,
    Jul => 7,
    Aug => 8,
    Sep => 9,
    Oct => 10,
    Nov => 11,
    Dec => 12,
    );

# Read headers
$/ = '';
my $head = <>;
$head =~ s/\n\s+/ /g;
my @headers = split("\n", $head);

# Parse headers
my @hops;
for (@headers) {
  next unless /^Received:/;
  #my $host = "(unknown)";
  my $host = "";
  $host = $1 if /\sby\s+([a-z0-9\-_+.]+)\s/ && $1 ne "uid";
  my $from = "";
  $from = $1 if /\sfrom\s+([a-z0-9\-_+.]+(?:\s+[(].+?[)]))\s/;
  my $time = "(unknown)";
  # sometimes time is
  #     Received: from MTI1NTEyNDE (unknown)
  #             by geopod-ismtpd-5 (SG) with HTTP
  #             id EkLbxY4GRa-tfw_YmYYN5A
  #             Sun, 10 Nov 2024 14:22:24.335 +0000 (UTC)
  # sometimes it's
  #     Received: by recvd-6dc67978-bxdx8 with SMTP id recvd-6dc67978-bxdx8-1-6730C1A0-1F
  #             2024-11-10 14:22:24.344840434 +0000 UTC m=+5084649.392920190
  # and sometimes it's
  #     Received: from o17.ptr8588.discord.com (o17.ptr8588.discord.com [192.254.120.211])
  #             (using TLSv1.3 with cipher TLS_AES_128_GCM_SHA256 (128/128 bits)
  #             key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
  #             (No client certificate requested)
  #             by plato.gedmin.as (Postfix) with ESMTPS id 9B10719410E7
  #             for <marius@gedmin.as>; Sun, 10 Nov 2024 16:32:02 +0200 (EET)
  $time = $1 if /;\s+(.+)$/;
  $time = $1 if /\s+((?:Sun|Mon|Tue|Wed|Thu|Fri|Sat), [a-zA-Z0-9:. +\-()]+)$/ && $time eq "(unknown)";
  $time = $1 if /\s+(\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d(?:\.\d+)? [+\-]\d\d\d\d \w+)/ && $time eq "(unknown)";
  # [Wkd,] <day> <mon> <year> <hr>:<mn>:<se> +<zone> [(<zone>)]
  my $epoch;
  if ($time =~ /^ (?:\w+,\s*)?          # Week day
                 (\d+) \s+              # Day
                 (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+   # Month
                 (\d+)\s+               # Year
                 (\d+):                 # Hour
                 (\d+):                 # Minute
                 (\d+)(?:\.\d+)?\s+     # Second
                 ([+-]\d{2})(\d{2})     # Time zone
               /x) {
    my ($day, $mon, $year, $hour, $min, $sec, $zone) =
      ($1, $Months{$2}, $3, $4, $5, $6, $7 * 60 + $8);
    # Some Y2K stuff
    $year += 100 if $year < 70;
    $year -= 1900 if $year >= 1970;

    $epoch = mktime($sec, $min, $hour, $day, $mon-1, $year, 0, 0, 0)
             - ($zone * 60);
    $epoch += time()-mktime(gmtime(time()));  # fix value for local timezone
  } elsif ($time =~ /^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)(?:\.\d+)? ([+\-]\d\d)(\d\d)/) {
    my ($year, $mon, $day, $hour, $min, $sec, $zone) = ($1, $2, $3, $4, $5, $6, $7 * 60 + $8);
    $year -= 1900;

    $epoch = mktime($sec, $min, $hour, $day, $mon-1, $year, 0, 0, 0) - ($zone * 60);
    $epoch += time()-mktime(gmtime(time()));  # fix value for local timezone
  }
  unshift @hops, { HOST => $host, FROM => $from, TIME => $epoch};
}


$~ = 'REPORT_LINE';
$^ = 'REPORT_TOP';

# Print output
#print "     Host                  Date received (UTC)     Lag        Total lag\n";
$nr = 0;
my ($first, $prev);
for (@hops) {
  $host = $_->{HOST};
  $from = $_->{FROM};
  my $time = $_->{TIME};
  $nr++;
  unless (defined $time) {
    $timestamp = "(unknown)";
    $lagminus = $totalminus = ' ';
    $lag = $total = "";
    write;
    next;
  }
  $first = $prev = $time unless defined $first;

  my $delta = $time - $prev;
  my $neg = $delta < 0; $delta = abs($delta);
  my $delta_h = int($delta / 3600);
  my $delta_m = int(($delta - $delta_h * 3600) / 60);
  my $delta_s = ($delta - $delta_h * 3600 - $delta_m * 60);

  my ($sec,$min,$hour,$day,$mon,$year,undef,undef,$dst) = localtime($time);
  $hour -= $dst;

  $timestamp = sprintf("%4d.%02d.%02d  %02d:%02d:%02d",
                       1900+$year, $mon+1, $day, $hour, $min, $sec);
  $lagminus = $neg ? '-' : ' ';
  $lag = sprintf("%02d:%02d:%02d", $delta_h, $delta_m, $delta_s);

  $delta = $time - $first;
  $neg = $delta < 0; $delta = abs($delta);
  $delta_h = int($delta / 3600);
  $delta_m = int(($delta - $delta_h * 3600) / 60);
  $delta_s = ($delta - $delta_h * 3600 - $delta_m * 60);

  $totalminus = $neg ? '-' : ' ';
  $total = sprintf ("%02d:%02d:%02d", $delta_h, $delta_m, $delta_s);

  write;

  if ($verbose && $from) {
    $~ = 'REPORT_LINE_VERBOSE';
    write;
    $~ = 'REPORT_LINE';
  }

  $prev = $time;
}

